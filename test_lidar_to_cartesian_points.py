import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Circle
import math

# LIDAR scan parameters
angle_min = -3.14  # -30 degrees in radians
angle_max = 3.14   # 30 degrees in radians
angle_increment = 0.008714509196579456

# The ranges data from the LIDAR scan

ranges = [
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    1.2239999771118164,
    1.2239999771118164,
    None,
    None,
    8.088000297546387,
    8.088000297546387,
    8.031999588012695,
    8.031999588012695,
    7.4720001220703125,
    7.4720001220703125,
    7.423999786376953,
    7.288000106811523,
    7.239999771118164,
    7.239999771118164,
    7.23199987411499,
    7.239999771118164,
    7.239999771118164,
    7.23199987411499,
    7.191999912261963,
    6.5279998779296875,
    6.5279998779296875,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    6.23199987411499,
    6.23199987411499,
    6.208000183105469,
    6.1519999504089355,
    6.0960001945495605,
    5.960000038146973,
    5.960000038146973,
    5.880000114440918,
    5.880000114440918,
    0.13600000739097595,
    5.880000114440918,
    5.808000087738037,
    5.808000087738037,
    5.800000190734863,
    5.688000202178955,
    None,
    None,
    5.599999904632568,
    5.599999904632568,
    5.5920000076293945,
    5.5920000076293945,
    5.5920000076293945,
    5.576000213623047,
    5.567999839782715,
    5.368000030517578,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    5.184000015258789,
    5.184000015258789,
    None,
    5.168000221252441,
    5.168000221252441,
    5.159999847412109,
    5.159999847412109,
    5.159999847412109,
    5.1519999504089355,
    5.1519999504089355,
    5.144000053405762,
    5.144000053405762,
    5.144000053405762,
    5.136000156402588,
    5.136000156402588,
    5.136000156402588,
    5.127999782562256,
    5.127999782562256,
    5.127999782562256,
    5.127999782562256,
    5.119999885559082,
    5.119999885559082,
    5.111999988555908,
    5.104000091552734,
    5.0960001945495605,
    5.0320000648498535,
    4.9679999351501465,
    4.960000038146973,
    4.952000141143799,
    4.935999870300293,
    4.935999870300293,
    4.927999973297119,
    4.927999973297119,
    4.927999973297119,
    4.927999973297119,
    4.920000076293945,
    4.9120001792907715,
    4.9039998054504395,
    4.895999908447266,
    None,
    None,
    2.568000078201294,
    2.568000078201294,
    None,
    4.935999870300293,
    4.935999870300293,
    4.935999870300293,
    4.935999870300293,
    None,
    None,
    None,
    None,
    None,
    4.920000076293945,
    4.920000076293945,
    None,
    None,
    None,
    None,
    4.168000221252441,
    4.168000221252441,
    None,
    None,
    5.02400016784668,
    5.02400016784668,
    5.039999961853027,
    5.039999961853027,
    4.992000102996826,
    5.047999858856201,
    5.104000091552734,
    5.127999782562256,
    5.127999782562256,
    5.127999782562256,
    5.127999782562256,
    5.127999782562256,
    5.127999782562256,
    5.136000156402588,
    5.136000156402588,
    5.136000156402588,
    5.136000156402588,
    5.144000053405762,
    5.144000053405762,
    4.935999870300293,
    4.935999870300293,
    4.935999870300293,
    None,
    2.1640000343322754,
    2.1640000343322754,
    2.1559998989105225,
    2.1440000534057617,
    None,
    None,
    None,
    3.859999895095825,
    3.859999895095825,
    3.803999900817871,
    3.803999900817871,
    3.6440000534057617,
    3.6440000534057617,
    3.635999917984009,
    3.447999954223633,
    3.447999954223633,
    3.3959999084472656,
    3.3440001010894775,
    3.2679998874664307,
    3.2320001125335693,
    3.187999963760376,
    3.140000104904175,
    3.0799999237060547,
    3.0360000133514404,
    3.0280001163482666,
    3.0199999809265137,
    2.8919999599456787,
    2.8919999599456787,
    2.8440001010894775,
    2.808000087738037,
    2.7720000743865967,
    2.747999906539917,
    2.7200000286102295,
    2.691999912261963,
    2.684000015258789,
    2.6080000400543213,
    2.5959999561309814,
    2.5920000076293945,
    2.555999994277954,
    2.5160000324249268,
    2.492000102996826,
    2.4760000705718994,
    2.4560000896453857,
    2.4240000247955322,
    2.4119999408721924,
    2.368000030517578,
    2.3559999465942383,
    2.3399999141693115,
    2.315999984741211,
    2.299999952316284,
    2.2720000743865967,
    2.259999990463257,
    2.24399995803833,
    2.2200000286102295,
    2.2079999446868896,
    None,
    1.4279999732971191,
    1.4279999732971191,
    1.4119999408721924,
    1.4040000438690186,
    1.3980000019073486,
    1.3819999694824219,
    1.3739999532699585,
    1.3619999885559082,
    1.3539999723434448,
    1.3420000076293945,
    1.3339999914169312,
    1.3279999494552612,
    1.3200000524520874,
    1.3140000104904175,
    1.2999999523162842,
    1.2960000038146973,
    1.2920000553131104,
    1.2799999713897705,
    1.2740000486373901,
    1.2660000324249268,
    1.2619999647140503,
    1.2580000162124634,
    1.246000051498413,
    1.2419999837875366,
    1.2339999675750732,
    1.2300000190734863,
    1.2259999513626099,
    1.2200000286102295,
    1.215999960899353,
    1.2059999704360962,
    1.2039999961853027,
    1.2020000219345093,
    1.1920000314712524,
    1.190000057220459,
    1.184000015258789,
    1.1820000410079956,
    1.1779999732971191,
    1.1699999570846558,
    1.1660000085830688,
    1.1619999408721924,
    1.159999966621399,
    1.1579999923706055,
    1.1519999504089355,
    1.149999976158142,
    1.1440000534057617,
    1.1440000534057617,
    1.1460000276565552,
    1.1640000343322754,
    1.187999963760376,
    1.2139999866485596,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    1.1740000247955322,
    1.1740000247955322,
    1.1779999732971191,
    1.1779999732971191,
    1.1740000247955322,
    1.1619999408721924,
    1.1579999923706055,
    1.1519999504089355,
    1.1480000019073486,
    0.13699999451637268,
    0.13500000536441803,
    1.1380000114440918,
    0.13300000131130219,
    1.1339999437332153,
    1.1319999694824219,
    1.1319999694824219,
    1.1319999694824219,
    1.1319999694824219,
    1.1339999437332153,
    1.1360000371932983,
    1.1380000114440918,
    1.1419999599456787,
    1.1460000276565552,
    1.1419999599456787,
    1.1339999437332153,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    1.6480000019073486,
    1.6480000019073486,
    1.6399999856948853,
    1.6380000114440918,
    1.6419999599456787,
    1.6440000534057617,
    1.6440000534057617,
    1.6480000019073486,
    1.6480000019073486,
    1.6519999504089355,
    1.6540000438690186,
    1.656000018119812,
    1.659999966621399,
    1.659999966621399,
    1.659999966621399,
    1.6699999570846558,
    1.6720000505447388,
    1.6799999475479126,
    1.6820000410079956,
    1.6820000410079956,
    1.6859999895095825,
    1.687999963760376,
    1.6920000314712524,
    1.6959999799728394,
    1.6979999542236328,
    1.7039999961853027,
    1.7039999961853027,
    1.7139999866485596,
    1.7200000286102295,
    1.7239999771118164,
    1.7300000190734863,
    1.7319999933242798,
    1.7419999837875366,
    1.746000051498413,
    1.75,
    1.7580000162124634,
    1.7660000324249268,
    1.7719999551773071,
    1.7799999713897705,
    1.784000039100647,
    1.7879999876022339,
    1.7979999780654907,
    1.8040000200271606,
    1.815999984741211,
    1.8200000524520874,
    1.8259999752044678,
    1.8359999656677246,
    1.840000033378601,
    1.8559999465942383,
    1.8639999628067017,
    1.8680000305175781,
    1.8799999952316284,
    1.8919999599456787,
    1.899999976158142,
    1.909999966621399,
    1.9199999570846558,
    1.9320000410079956,
    1.9479999542236328,
    1.9700000286102295,
    2.003999948501587,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    2.0339999198913574,
    2.0339999198913574,
    2.065999984741211,
    2.119999885559082,
    2.1440000534057617,
    2.1640000343322754,
    2.187999963760376,
    2.200000047683716,
    2.2279999256134033,
    2.24399995803833,
    2.259999990463257,
    2.2760000228881836,
    2.2880001068115234,
    2.312000036239624,
    2.3399999141693115,
    2.3559999465942383,
    2.384000062942505,
    2.4040000438690186,
    2.4200000762939453,
    2.4519999027252197,
    2.4639999866485596,
    2.4839999675750732,
    2.5160000324249268,
    2.5399999618530273,
    2.572000026702881,
    2.5959999561309814,
    2.6080000400543213,
    2.6679999828338623,
    2.691999912261963,
    2.7119998931884766,
    2.747999906539917,
    2.7679998874664307,
    2.7880001068115234,
    2.868000030517578,
    2.888000011444092,
    2.8919999599456787,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    3.5920000076293945,
    3.5920000076293945,
    3.6440000534057617,
    3.75600004196167,
    3.812000036239624,
    3.868000030517578,
    3.996000051498413,
    3.996000051498413,
    None,
    None,
    None,
    None,
    1.6740000247955322,
    1.6740000247955322,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    5.872000217437744,
    5.872000217437744,
    5.880000114440918,
    5.880000114440918,
    5.880000114440918,
    5.880000114440918,
    5.880000114440918,
    5.880000114440918,
    5.880000114440918,
    5.880000114440918,
    5.880000114440918,
    5.880000114440918,
    None,
    6.375999927520752,
    6.375999927520752,
    6.28000020980835,
    6.28000020980835,
    6.263999938964844,
    6.25600004196167,
    6.248000144958496,
    6.216000080108643,
    6.223999977111816,
    6.248000144958496,
    6.248000144958496,
    6.23199987411499,
    6.208000183105469,
    6.208000183105469,
    6.216000080108643,
    6.248000144958496,
    6.311999797821045,
    None,
    0.8579999804496765,
    0.8579999804496765,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    6.368000030517578,
    6.368000030517578,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    2.247999906539917,
    2.247999906539917,
    2.2200000286102295,
    2.2200000286102295,
    2.2039999961853027,
    2.191999912261963,
    2.1760001182556152,
    2.1480000019073486,
    None,
    None,
    None,
    2.1600000858306885,
    2.1600000858306885,
    2.1760001182556152,
    2.1760001182556152,
    2.184000015258789,
    1.2400000095367432,
    1.2400000095367432,
    1.2200000286102295,
    1.2020000219345093,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    0.8360000252723694,
    0.8360000252723694,
    0.7960000038146973,
    0.7960000038146973,
    0.7860000133514404,
    0.7860000133514404,
    0.7720000147819519,
    0.777999997138977,
    0.777999997138977,
    0.7699999809265137,
    0.765999972820282,
    0.7720000147819519,
    0.7639999985694885,
    0.7559999823570251,
    0.7639999985694885,
    0.7699999809265137,
    0.7760000228881836,
    0.8019999861717224,
    0.8059999942779541,
    1.8020000457763672,
    1.8020000457763672,
    None,
    1.805999994277954,
    1.805999994277954,
    1.8300000429153442,
    1.8339999914169312,
    1.8380000591278076,
    None,
    None,
    None,
    None,
    None,
    None,
    2.247999906539917,
    2.247999906539917,
    2.2079999446868896,
    2.1679999828338623,
    2.1519999504089355,
    2.1519999504089355,
    None,
    None,
    None,
    0.9380000233650208,
    0.9380000233650208,
    0.9359999895095825,
    0.9359999895095825,
    0.9340000152587891,
    None,
    None,
    None,
    None,
    8.192000389099121,
    8.192000389099121,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    8.336000442504883,
    8.336000442504883,
    None,
    None,
    6.552000045776367,
    6.552000045776367,
    6.480000019073486,
    6.480000019073486,
    4.263999938964844,
    4.263999938964844,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None
  ]

def visualize_lidar_map():
    # Generate angles for each measurement
    angles = []
    valid_ranges = []

    ranges.reverse()

    for i, range_val in enumerate(ranges):
        angle = angle_min + i * angle_increment
        angles.append(angle)
        
        # Handle None values by using a large distance or filtering out
        if range_val is None:
            valid_ranges.append(np.nan)
        else:
            valid_ranges.append(range_val)
    
    # Convert to numpy arrays
    angles = np.array(angles)
    valid_ranges = np.array(valid_ranges)
    
    # Create the cartesian map view
    fig, ax = plt.subplots(1, 1, figsize=(10, 8))
    
    # Cartesian map view
    # Convert polar to cartesian coordinates
    x_coords = []
    y_coords = []
    
    for angle, range_val in zip(angles, valid_ranges):
        if not np.isnan(range_val):
            x = range_val * np.sin(angle)  # sin for x (left-right)
            y = range_val * np.cos(angle)  # cos for y (forward-back)
            x_coords.append(x)
            y_coords.append(y)
    
    # Plot cartesian view
    ax.scatter(x_coords, y_coords, c='red', s=20, alpha=0.7, label='Obstacles')
    
    # Highlight close obstacles
    for angle, range_val in zip(angles, valid_ranges):
        if not np.isnan(range_val) and range_val < 0.5:
            x = range_val * np.cos(angle)
            y = range_val * np.sin(angle)
            ax.scatter(x, y, c='red', s=50, marker='x', linewidth=3)
    
    # Add robot position and orientation
    ax.scatter(0, 0, c='blue', s=100, marker='o', label='Robot')
    ax.arrow(0, 0, 0.3, 0, head_width=0.05, head_length=0.05, fc='blue', ec='blue')
    
    # Set up cartesian plot
    ax.set_xlabel('X (meters) - Left/Right')
    ax.set_ylabel('Y (meters) - Forward/Back')
    ax.set_title('LIDAR Map View\n(Blue = Robot, Red = Obstacles)', fontsize=12)
    ax.grid(True, alpha=0.3)
    ax.legend()
    ax.axis('equal')
    
    # Add safety zones
    safety_circle = Circle((0, 0), 0.5, fill=False, linestyle='--', 
                          color='orange', linewidth=2, label='Safety Zone (0.5m)')
    ax.add_patch(safety_circle)
    
    plt.tight_layout()
    plt.show()
    
    # Print summary
    valid_measurements = ~np.isnan(valid_ranges)
    close_obstacles = valid_ranges[valid_measurements & (valid_ranges < 0.5)]
    
    print(f"LIDAR Scan Summary:")
    print(f"- Scan range: {math.degrees(angle_min):.1f}° to {math.degrees(angle_max):.1f}°")
    print(f"- Total measurements: {len(ranges)}")
    print(f"- Valid measurements: {np.sum(valid_measurements)}")
    print(f"- Closest obstacle: {np.nanmin(valid_ranges):.3f}m")
    print(f"- Critical obstacles (<0.5m): {len(close_obstacles)}")
    
    if len(close_obstacles) > 0:
        print(f"⚠️  WARNING: Robot path blocked by close obstacles!")
    else:
        print(f"✅ Path appears clear for forward movement")

if __name__ == "__main__":
    visualize_lidar_map()
